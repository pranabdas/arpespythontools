"use strict";(self.webpackChunkarpespythontools=self.webpackChunkarpespythontools||[]).push([[291],{3905:function(e,a,t){t.d(a,{Zo:function(){return m},kt:function(){return u}});var n=t(7294);function i(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function l(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,n)}return t}function r(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?l(Object(t),!0).forEach((function(a){i(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function p(e,a){if(null==e)return{};var t,n,i=function(e,a){if(null==e)return{};var t,n,i={},l=Object.keys(e);for(n=0;n<l.length;n++)t=l[n],a.indexOf(t)>=0||(i[t]=e[t]);return i}(e,a);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)t=l[n],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var o=n.createContext({}),s=function(e){var a=n.useContext(o),t=a;return e&&(t="function"==typeof e?e(a):r(r({},a),e)),t},m=function(e){var a=s(e.components);return n.createElement(o.Provider,{value:a},e.children)},d={inlineCode:"code",wrapper:function(e){var a=e.children;return n.createElement(n.Fragment,{},a)}},k=n.forwardRef((function(e,a){var t=e.components,i=e.mdxType,l=e.originalType,o=e.parentName,m=p(e,["components","mdxType","originalType","parentName"]),k=s(t),u=i,N=k["".concat(o,".").concat(u)]||k[u]||d[u]||l;return t?n.createElement(N,r(r({ref:a},m),{},{components:t})):n.createElement(N,r({ref:a},m))}));function u(e,a){var t=arguments,i=a&&a.mdxType;if("string"==typeof e||i){var l=t.length,r=new Array(l);r[0]=k;var p={};for(var o in a)hasOwnProperty.call(a,o)&&(p[o]=a[o]);p.originalType=e,p.mdxType="string"==typeof e?e:i,r[1]=p;for(var s=2;s<l;s++)r[s]=t[s];return n.createElement.apply(null,r)}return n.createElement.apply(null,t)}k.displayName="MDXCreateElement"},5309:function(e,a,t){t.r(a),t.d(a,{assets:function(){return m},contentTitle:function(){return o},default:function(){return u},frontMatter:function(){return p},metadata:function(){return s},toc:function(){return d}});var n=t(7462),i=t(3366),l=(t(7294),t(3905)),r=["components"],p={title:"Glossary"},o=void 0,s={unversionedId:"glossary",id:"glossary",title:"Glossary",description:"Full list of arpespythontools modules/ routines in alphabetical order:",source:"@site/docs/glossary.md",sourceDirName:".",slug:"/glossary",permalink:"/arpespythontools/docs/glossary",editUrl:"https://github.com/pranabdas/arpespythontools/blob/main/docs/glossary.md",tags:[],version:"current",frontMatter:{title:"Glossary"},sidebar:"docs",previous:{title:"Igor text",permalink:"/arpespythontools/docs/igor"},next:{title:"License",permalink:"/arpespythontools/docs/license"}},m={},d=[{value:"crop_2d",id:"crop_2d",level:2},{value:"cv2d",id:"cv2d",level:2},{value:"export_itx",id:"export_itx",level:2},{value:"import_itx",id:"import_itx",level:2},{value:"k_conv",id:"k_conv",level:2},{value:"k_conv3d",id:"k_conv3d",level:2},{value:"laplacian",id:"laplacian",level:2},{value:"line_profile",id:"line_profile",level:2},{value:"load_ses_map",id:"load_ses_map",level:2},{value:"load_ses_spectra",id:"load_ses_spectra",level:2},{value:"plane_slice",id:"plane_slice",level:2},{value:"rotate_2d",id:"rotate_2d",level:2},{value:"rotate_3d",id:"rotate_3d",level:2},{value:"save_xps",id:"save_xps",level:2}],k={toc:d};function u(e){var a=e.components,t=(0,i.Z)(e,r);return(0,l.kt)("wrapper",(0,n.Z)({},k,t,{components:a,mdxType:"MDXLayout"}),(0,l.kt)("p",null,"Full list of ",(0,l.kt)("strong",{parentName:"p"},"arpespythontools")," modules/ routines in alphabetical order:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"import arpespythontools as arp\n")),(0,l.kt)("h2",{id:"crop_2d"},"crop_2d"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"data_crop, x_crop, y_crop = arp.crop_2d(data, x, y, x_min, x_max, y_min, y_max)\n")),(0,l.kt)("p",null,"Returns cropped 2D array and corresponding axes scaling vectors defined by\n","[x_min, x_max]"," and ","[y_min, y_max]","."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Inputs:")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"data")," : 2D array (intensity matrix)."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"x")," : 1D vector (e.g., angle)."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"y")," : 1D vector (e.g., energy)."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"x_min")," and ",(0,l.kt)("inlineCode",{parentName:"li"},"x_max")," : lower and upper bound of ",(0,l.kt)("inlineCode",{parentName:"li"},"x")," to crop."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"y_min")," and ",(0,l.kt)("inlineCode",{parentName:"li"},"y_max")," : lower and upper bound of ",(0,l.kt)("inlineCode",{parentName:"li"},"y")," to crop.")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Outputs:")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"data_crop")," : cropped 2D array."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"x_crop")," : corresponding x-scaling vector."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"y_crop")," : corresponding y-scaling vector.")),(0,l.kt)("h2",{id:"cv2d"},"cv2d"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"cv2d, x, y = arp.cv2d(data, x, y, bw=5, c1=0.001, c2=0.001, w='default')\n")),(0,l.kt)("p",null,"Calculates two-dimensional curvature. The details about the curvature method can\nbe found here: P. Zhang et. al., ",(0,l.kt)("em",{parentName:"p"},"A precise method for visualizing dispersive\nfeatures in image plots"),", ",(0,l.kt)("a",{parentName:"p",href:"https://doi.org/10.1063/1.3585113"},"Review of Scientific Instruments ",(0,l.kt)("strong",{parentName:"a"},"82"),", 043712\n(2011)"),"."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Inputs:")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"data")," : 2D spectra."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"x")," : 1D array of energy."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"y")," : 1D array of theta values."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"bw")," : width for box-car smoothing, integer number of points (default value =\n5)."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"c1"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"c2")," : free parameters as described in the above reference (optional)."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"w")," : scaling weight (optional).")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Outputs:")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"cv2d")," : 2D array of curvature. Output array has different shape than the\ninput array as the edges are removed due to smoothing artifacts."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"x")," : cropped input ",(0,l.kt)("inlineCode",{parentName:"li"},"x")," array to match ",(0,l.kt)("inlineCode",{parentName:"li"},"cv2d")," dimension."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"y")," : cropped input ",(0,l.kt)("inlineCode",{parentName:"li"},"y")," array to match ",(0,l.kt)("inlineCode",{parentName:"li"},"cv2d")," dimension.")),(0,l.kt)("h2",{id:"export_itx"},"export_itx"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"arp.export_itx(path, data, x=[], y=[], z =[], wave_name='wave', \\\n    x_label='x-label', y_label='y-label', z_label='z-label')\n")),(0,l.kt)("p",null,"Exports 1D, 2D, or 3D array to Igor text (",(0,l.kt)("inlineCode",{parentName:"p"},".itx"),") file."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Inputs:")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"path")," : Output filename or path of the ",(0,l.kt)("inlineCode",{parentName:"li"},".itx")," file."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"data")," : Input data array to save. Could be 1D, 2D, or 3D array."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"x"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"y"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"z")," (optional) : axes scaling for the corresponding input data array.\nIf a value is not provided, default ",(0,l.kt)("inlineCode",{parentName:"li"},"DimOffset=0")," and ",(0,l.kt)("inlineCode",{parentName:"li"},"DimDelta=1")," would be\napplied."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"wave_name")," (optional) : Igor wave name."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"x-"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"y-"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"z-label")," (optional) : labels for ",(0,l.kt)("inlineCode",{parentName:"li"},"x"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"y")," and ",(0,l.kt)("inlineCode",{parentName:"li"},"z"),", respectively.")),(0,l.kt)("h2",{id:"import_itx"},"import_itx"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"data, x, y, z = arp.import_itx(name)\n")),(0,l.kt)("p",null,"Loads data and its axes scaling from Igor text (",(0,l.kt)("inlineCode",{parentName:"p"},".itx"),") format."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Inputs:")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"name")," (string) : Input Igor text filename.")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Outputs:")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"data")," : 1D, 2D, or 3D array."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"x"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"y"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"z")," : axes scales. Number of output returned depends on the input\nwave dimension.")),(0,l.kt)("h2",{id:"k_conv"},"k_conv"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"data_k, e_bin, k = arp.k_conv(data, energy, angle, fermi_energy)\n")),(0,l.kt)("p",null,"Transforms the intensity fromm real space to k-space."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Inputs:")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"data")," : 2D array of intensity values in real space. Dimension 1 is along\nenergy and Dimension 2 is along angle."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"energy")," : 1D array of kinetic energy values in eV."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"angle")," : 1D array of theta values in degree."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"fermi_energy")," (number) : Fermi energy value in eV in terms of kinetic energy.")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Outputs:")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"data_k")," : 2D array of intensity values in k-space. Intensity values outside\nthe interpolation range is set to ",(0,l.kt)("inlineCode",{parentName:"li"},"NaN")," (not a number)."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"e_bin")," : 1D array of Binding energy values in eV. Binding energy below Fermi\nenergy is positive convention is used."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"k")," : 1D array of momentum (k) values in ",(0,l.kt)("span",{parentName:"li",className:"math math-inline"},(0,l.kt)("span",{parentName:"span",className:"katex"},(0,l.kt)("span",{parentName:"span",className:"katex-mathml"},(0,l.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,l.kt)("semantics",{parentName:"math"},(0,l.kt)("mrow",{parentName:"semantics"},(0,l.kt)("msup",{parentName:"mrow"},(0,l.kt)("mover",{parentName:"msup",accent:"true"},(0,l.kt)("mi",{parentName:"mover"},"A"),(0,l.kt)("mo",{parentName:"mover"},"\u02da")),(0,l.kt)("mrow",{parentName:"msup"},(0,l.kt)("mo",{parentName:"mrow"},"\u2212"),(0,l.kt)("mn",{parentName:"mrow"},"1")))),(0,l.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"\\mathring{A}^{-1}")))),(0,l.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,l.kt)("span",{parentName:"span",className:"base"},(0,l.kt)("span",{parentName:"span",className:"strut",style:{height:"0.9468em"}}),(0,l.kt)("span",{parentName:"span",className:"mord"},(0,l.kt)("span",{parentName:"span",className:"mord accent"},(0,l.kt)("span",{parentName:"span",className:"vlist-t"},(0,l.kt)("span",{parentName:"span",className:"vlist-r"},(0,l.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.9468em"}},(0,l.kt)("span",{parentName:"span",style:{top:"-3em"}},(0,l.kt)("span",{parentName:"span",className:"pstrut",style:{height:"3em"}}),(0,l.kt)("span",{parentName:"span",className:"mord mathnormal"},"A")),(0,l.kt)("span",{parentName:"span",style:{top:"-3.2523em"}},(0,l.kt)("span",{parentName:"span",className:"pstrut",style:{height:"3em"}}),(0,l.kt)("span",{parentName:"span",className:"accent-body",style:{left:"-0.2361em"}},(0,l.kt)("span",{parentName:"span",className:"mord"},"\u02da"))))))),(0,l.kt)("span",{parentName:"span",className:"msupsub"},(0,l.kt)("span",{parentName:"span",className:"vlist-t"},(0,l.kt)("span",{parentName:"span",className:"vlist-r"},(0,l.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.8141em"}},(0,l.kt)("span",{parentName:"span",style:{top:"-3.063em",marginRight:"0.05em"}},(0,l.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,l.kt)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,l.kt)("span",{parentName:"span",className:"mord mtight"},(0,l.kt)("span",{parentName:"span",className:"mord mtight"},"\u2212"),(0,l.kt)("span",{parentName:"span",className:"mord mtight"},"1"))))))))))))),".")),(0,l.kt)("h2",{id:"k_conv3d"},"k_conv3d"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"data_k, e_bin, kx, ky = arp.k_conv3d(data, energy, theta, phi, fermi_energy)\n")),(0,l.kt)("p",null,"Transforms the Fermi map data from real space to k-space."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Inputs:")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"data")," : 3D matrix of intensity values in real space. Dimension 1 is along\nkinetic energy, Dimension 2 is along theta, and Dimension 3 along phi."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"energy")," : 1D array of kinetic energy values in eV."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"theta")," : 1D array of theta values in degree. This is the direction along the\nslit."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"phi")," : 1D array of phi values in degree. This is the direction perpendicular\nto the slit."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"fermi_energy")," (number) : Fermi energy value in eV in terms of kinetic energy.")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Outputs:")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"data_k")," : 3D matrix of intensity values in k-space. Intensity values outside\nthe interpolation range is set to ",(0,l.kt)("inlineCode",{parentName:"li"},"NaN")," (not a number)."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"e_bin")," : 1D array of Binding energy values in eV. Binding energy below Fermi\nenergy is positive convention is used."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"kx"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"ky")," : 1D array of momentum (k) values in ",(0,l.kt)("span",{parentName:"li",className:"math math-inline"},(0,l.kt)("span",{parentName:"span",className:"katex"},(0,l.kt)("span",{parentName:"span",className:"katex-mathml"},(0,l.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,l.kt)("semantics",{parentName:"math"},(0,l.kt)("mrow",{parentName:"semantics"},(0,l.kt)("msup",{parentName:"mrow"},(0,l.kt)("mover",{parentName:"msup",accent:"true"},(0,l.kt)("mi",{parentName:"mover"},"A"),(0,l.kt)("mo",{parentName:"mover"},"\u02da")),(0,l.kt)("mrow",{parentName:"msup"},(0,l.kt)("mo",{parentName:"mrow"},"\u2212"),(0,l.kt)("mn",{parentName:"mrow"},"1")))),(0,l.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"\\mathring{A}^{-1}")))),(0,l.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,l.kt)("span",{parentName:"span",className:"base"},(0,l.kt)("span",{parentName:"span",className:"strut",style:{height:"0.9468em"}}),(0,l.kt)("span",{parentName:"span",className:"mord"},(0,l.kt)("span",{parentName:"span",className:"mord accent"},(0,l.kt)("span",{parentName:"span",className:"vlist-t"},(0,l.kt)("span",{parentName:"span",className:"vlist-r"},(0,l.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.9468em"}},(0,l.kt)("span",{parentName:"span",style:{top:"-3em"}},(0,l.kt)("span",{parentName:"span",className:"pstrut",style:{height:"3em"}}),(0,l.kt)("span",{parentName:"span",className:"mord mathnormal"},"A")),(0,l.kt)("span",{parentName:"span",style:{top:"-3.2523em"}},(0,l.kt)("span",{parentName:"span",className:"pstrut",style:{height:"3em"}}),(0,l.kt)("span",{parentName:"span",className:"accent-body",style:{left:"-0.2361em"}},(0,l.kt)("span",{parentName:"span",className:"mord"},"\u02da"))))))),(0,l.kt)("span",{parentName:"span",className:"msupsub"},(0,l.kt)("span",{parentName:"span",className:"vlist-t"},(0,l.kt)("span",{parentName:"span",className:"vlist-r"},(0,l.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.8141em"}},(0,l.kt)("span",{parentName:"span",style:{top:"-3.063em",marginRight:"0.05em"}},(0,l.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,l.kt)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,l.kt)("span",{parentName:"span",className:"mord mtight"},(0,l.kt)("span",{parentName:"span",className:"mord mtight"},"\u2212"),(0,l.kt)("span",{parentName:"span",className:"mord mtight"},"1")))))))))))))," along\nthe slit, and perpendicular to the slit directions, respectively.")),(0,l.kt)("h2",{id:"laplacian"},"laplacian"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"diff2, x, y = arp.laplacian(data, x, y, bw=5, w='default')\n")),(0,l.kt)("p",null,"Laplacian (second order partial derivatives with respect to both energy and\nangle) of the spectra."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Inputs:")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"data")," : 2D spectra."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"x")," : 1D array of energy."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"y")," : 1D array of theta values."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"bw")," : width for box-car smoothing, integer number of points (default value =\n5)."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"w")," : scaling weight (optional).")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Outputs:")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"diff2")," : 2D array of spectra after taking second order partial derivative\nw.r.t. both energy and angle. This array has different shape than the input\narray as the edges are removed due to smoothing artifacts."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"x")," : cropped input ",(0,l.kt)("inlineCode",{parentName:"li"},"x")," array to match ",(0,l.kt)("inlineCode",{parentName:"li"},"diff2")," dimension."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"y")," : cropped input ",(0,l.kt)("inlineCode",{parentName:"li"},"y")," array to match ",(0,l.kt)("inlineCode",{parentName:"li"},"diff2")," dimension.")),(0,l.kt)("h2",{id:"line_profile"},"line_profile"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"edc = arp.line_profile(data, y, y_min, y_max)\n")),(0,l.kt)("p",null,"Returns the 1D vector of integrated line profile. The integration is done along\nthe second dimension of ",(0,l.kt)("inlineCode",{parentName:"p"},"data"),"."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Inputs:")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"data")," : 2D array."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"y")," : 1D vector of axis scaling along the second dimension of ",(0,l.kt)("inlineCode",{parentName:"li"},"data"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"y_min"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"y_max")," : integration bounds.")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Outputs:")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"edc")," : 1D vector of integrated values defined by the width ","[y_min, y_max]","\nalong the first dimension.")),(0,l.kt)("h2",{id:"load_ses_map"},"load_ses_map"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"data, energy, theta, phi = arp.load_map_data(name)\n")),(0,l.kt)("p",null,"Loads Fermi map data from output ",(0,l.kt)("inlineCode",{parentName:"p"},".zip")," file of Scienta-Omicron SES program."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Inputs:")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"name")," (string) : name or file path of ",(0,l.kt)("inlineCode",{parentName:"li"},".zip")," map data file. It could be a local path\nor URL path.")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Outputs:")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"data"),": 3D array of intensity values. Dimension 1 \u2192 energy, Dimension 2 \u2192\nangle theta (along the slit direction), and Dimension 3 \u2192 angle phi (azimuth/\nperpendicular to the slit direction)."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"energy"),": 1D vector of kinetic energy points in eV."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"theta"),": 1D vector of theta values in degree."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"phi")," : 1D vector of phi values in degree.")),(0,l.kt)("h2",{id:"load_ses_spectra"},"load_ses_spectra"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"data, angle, energy = arp.load_ses_spectra(name)\n")),(0,l.kt)("p",null,"Loads data from a text file produced by Scienta-Omicron SES program."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Inputs:")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"name")," (string) : name or file path of SES ",(0,l.kt)("inlineCode",{parentName:"li"},".txt")," file. It could be a local path or a\nURL address.")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Outputs:")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"data")," : 2D array (numpy ndarry) of intensity values."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"angle")," : 1D vector (numpy ndarry) of angle values in degree."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"energy")," : 1D vector (numpy ndarry) of kinetic energy values in eV.")),(0,l.kt)("h2",{id:"plane_slice"},"plane_slice"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"surf = arp.plane_slice(data, x, x_min, x_max)\n")),(0,l.kt)("p",null,"Returns the 2D slice along the first dimension of ",(0,l.kt)("inlineCode",{parentName:"p"},"data")," and integrated in the\nwidth ","[x_min, x_max]","."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Inputs:")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"data")," : 3D matrix."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"x")," : axes scaling along the first dimension."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"x_min"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"x_max")," : integration bounds.")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Outputs:")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"surf")," : 2D array.")),(0,l.kt)("h2",{id:"rotate_2d"},"rotate_2d"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"data_r, theta_r, phi_r = arp.rotate_2d(data, angle, theta, phi)\n")),(0,l.kt)("p",null,"Rotates 2D array with rotation axis perpendicular to the plane. Center of\nrotation is at theta=0, phi=0."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Inputs:")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"data")," : 2D array. The data will be rotated perpendicular to the plane."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"angle")," : amount of rotation in degree. Positive value rotates clockwise."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"theta")," : 1D array of axis scaling along the second dimension of ",(0,l.kt)("inlineCode",{parentName:"li"},"data"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"phi")," : 1D array of axis scaling along the third dimension of ",(0,l.kt)("inlineCode",{parentName:"li"},"data"),".")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Outputs:")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"data_r")," : rotated 2D matrix. Data points outside of interpolation range is\nset to ",(0,l.kt)("inlineCode",{parentName:"li"},"NaN")," (not a number)."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"theta_r")," : 1D array of axis scaling along the second dimension of ",(0,l.kt)("inlineCode",{parentName:"li"},"data_r"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"phi_r")," : 1D array of axis scaling along the third dimension of ",(0,l.kt)("inlineCode",{parentName:"li"},"data_r"),".")),(0,l.kt)("h2",{id:"rotate_3d"},"rotate_3d"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},"data_r, theta_r, phi_r = arp.rotate_3d(data, angle, theta, phi)\n")),(0,l.kt)("p",null,"Rotates the volume data (3D matrix) with respect to the first dimension. Center\nof rotation is at theta=0, phi=0."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Inputs:")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"data")," : 3D array. First, second, and third dimensions are along energy,\ntheta, and phi, respectively. The data will be rotated perpendicular to energy,\ni.e., in the theta-phi plane."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"angle")," : amount of rotation in degree. Positive value rotates clockwise."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"theta")," : 1D array of axis scaling along the second dimension of ",(0,l.kt)("inlineCode",{parentName:"li"},"data"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"phi")," : 1D array of axis scaling along the third dimension of ",(0,l.kt)("inlineCode",{parentName:"li"},"data"),".")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Outputs:")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"data_r")," : rotated 3D matrix. Data points outside of interpolation range is\nset to ",(0,l.kt)("inlineCode",{parentName:"li"},"NaN")," (not a number)."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"theta_r")," : 1D array of axis scaling along the second dimension of ",(0,l.kt)("inlineCode",{parentName:"li"},"data_r"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"phi_r")," : 1D array of axis scaling along the third dimension of ",(0,l.kt)("inlineCode",{parentName:"li"},"data_r"),".")),(0,l.kt)("h2",{id:"save_xps"},"save_xps"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'arp.save_xps(energy, intensity, "xps_data.x_y")\n')),(0,l.kt)("p",null,"Save XPS energy and intensity in two column plaintext file."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Inputs:")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"energy")," : one dimensional vector"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"intensity")," : one dimensional vector"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"filename")," : string value corresponding to filename.")),(0,l.kt)("p",null,"No output is returned, only the data file is saved at specified filename."))}u.isMDXComponent=!0}}]);