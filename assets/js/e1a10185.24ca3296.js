"use strict";(self.webpackChunkarpespythontools=self.webpackChunkarpespythontools||[]).push([[211],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return m}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),s=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=s(e.components);return r.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),f=s(n),m=a,d=f["".concat(p,".").concat(m)]||f[m]||u[m]||o;return n?r.createElement(d,i(i({ref:t},c),{},{components:n})):r.createElement(d,i({ref:t},c))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=f;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var s=2;s<o;s++)i[s]=n[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},1896:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return p},default:function(){return m},frontMatter:function(){return l},metadata:function(){return s},toc:function(){return u}});var r=n(7462),a=n(3366),o=(n(7294),n(3905)),i=["components"],l={title:"Slicing volume data"},p=void 0,s={unversionedId:"plane-slice",id:"plane-slice",title:"Slicing volume data",description:"We can slice our 3D Fermi map data in order to get a particular plane using the",source:"@site/docs/plane-slice.md",sourceDirName:".",slug:"/plane-slice",permalink:"/arpespythontools/docs/plane-slice",editUrl:"https://github.com/pranabdas/arpespythontools/blob/main/docs/plane-slice.md",tags:[],version:"current",frontMatter:{title:"Slicing volume data"},sidebar:"docs",previous:{title:"Line profile",permalink:"/arpespythontools/docs/line-profile"},next:{title:"Rotate Fermi map",permalink:"/arpespythontools/docs/rotate"}},c={},u=[],f={toc:u};function m(e){var t=e.components,l=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},f,l,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"We can slice our 3D Fermi map data in order to get a particular plane using the\n",(0,o.kt)("inlineCode",{parentName:"p"},"plane_slice")," function. Say, we need a constant energy cut."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"import arpespythontools as arp\ndata, energy, theta, phi = arp.load_ses_map('sample_map_data.zip')\n# We want iso-energy surface integrated between energy values 15.6 and 15.8 eV\niso_energy_surf = arp.plane_slice(data, energy, 15.6, 15.8)\n\n# Plot image\nimport matplotlib.pyplot as plt\n%matplotlib inline\n# Above line is specific to Jupyter Notebook\nplt.figure(figsize = (8, 6))\nplt.imshow(iso_energy_surf, origin = 'lower', aspect = 'auto', \\\n            extent = (theta[0], theta[-1], phi[0], phi[-1]))\nplt.xlabel('$\\\\phi$ (deg)')\nplt.ylabel(\"$\\\\theta$ (deg)\")\nplt.show()\n")),(0,o.kt)("p",null,"This should give you an iso-energy surface like this:"),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"iso-energy-surface",src:n(251).Z,width:"712",height:"549"})),(0,o.kt)("p",null,"How about if we want the slice along another axis? All we need is transpose the\ndata, and provide the correct axis order."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"# integrating phi values between (-0.5, 0.5) degrees\nphi_slice = arp.plane_slice(data.transpose([2, 0, 1]), phi, -0.5, 0.5)\n\n# Plot image\nimport matplotlib.pyplot as plt\n%matplotlib inline\n# Above line is specific to Jupyter Notebook\nplt.figure(figsize = (8, 6))\nplt.imshow(phi_slice, origin = 'lower', aspect = 'auto', \\\n            extent = (phi[0], phi[-1], energy[0], energy[-1]))\nplt.xlabel(\"$\\\\theta$ (deg)\")\nplt.ylabel('$E_{kin}$ (eV)')\nplt.show()\n")),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"phi-slice",src:n(981).Z,width:"728",height:"549"})))}m.isMDXComponent=!0},251:function(e,t,n){t.Z=n.p+"assets/images/iso-energy-surface-f877480b763d8848e675caf159b6155c.png"},981:function(e,t,n){t.Z=n.p+"assets/images/phi-slice-af798d816191e1c58e05a8774f26d9b3.png"}}]);