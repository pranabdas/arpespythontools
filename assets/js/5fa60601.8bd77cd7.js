"use strict";(self.webpackChunkarpespythontools=self.webpackChunkarpespythontools||[]).push([[264],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return f}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),s=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=s(e.components);return r.createElement(l.Provider,{value:t},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,c=p(e,["components","mdxType","originalType","parentName"]),d=s(n),u=o,f=d["".concat(l,".").concat(u)]||d[u]||m[u]||a;return n?r.createElement(f,i(i({ref:t},c),{},{components:n})):r.createElement(f,i({ref:t},c))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=u;var p={};for(var l in t)hasOwnProperty.call(t,l)&&(p[l]=t[l]);p.originalType=e,p[d]="string"==typeof e?e:o,i[1]=p;for(var s=2;s<a;s++)i[s]=n[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},3258:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return l},default:function(){return u},frontMatter:function(){return p},metadata:function(){return s},toc:function(){return d}});var r=n(7462),o=n(3366),a=(n(7294),n(3905)),i=["components"],p={title:"Import / export Igor text",sidebar_label:"Igor text"},l=void 0,s={unversionedId:"igor",id:"igor",title:"Import / export Igor text",description:"If you need to work with the Igor Program, arpespythontools provides a way to",source:"@site/docs/igor.md",sourceDirName:".",slug:"/igor",permalink:"/arpespythontools/docs/igor",draft:!1,editUrl:"https://github.com/pranabdas/arpespythontools/blob/main/docs/igor.md",tags:[],version:"current",frontMatter:{title:"Import / export Igor text",sidebar_label:"Igor text"},sidebar:"docs",previous:{title:"XPS data",permalink:"/arpespythontools/docs/xps"},next:{title:"Glossary",permalink:"/arpespythontools/docs/glossary"}},c={},d=[],m={toc:d};function u(e){var t=e.components,n=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"If you need to work with the Igor Program, ",(0,a.kt)("inlineCode",{parentName:"p"},"arpespythontools")," provides a way to\nimport and export data in Igor text (",(0,a.kt)("inlineCode",{parentName:"p"},".itx"),") format. ",(0,a.kt)("inlineCode",{parentName:"p"},"import_itx")," and\n",(0,a.kt)("inlineCode",{parentName:"p"},"export_itx")," functions can import and export 1-dimensionl, 2-dimensionl, and\n3-dimensionl data/wave, respectively."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python",metastring:"showLineNumbers",showLineNumbers:!0},"import arpespythontools as arp\n\n# import itx file\ndata, x = arp.import_itx('path/data.itx')  # 1D wave\ndata, x, y = arp.import_itx('path/data.itx')  # 2D wave\ndata, x, y, z = arp.import_itx('path/data.itx')  # 3D wave\n\n# export itx file\narp.export_itx(\"path/data.itx\", data, x=[], y=[], z =[], wave_name='wave',\\\n    x_label='x-label', y_label='y-label', z_label='z-label')\n")),(0,a.kt)("p",null,"While importing, ",(0,a.kt)("inlineCode",{parentName:"p"},"data")," contains the 1D, 2D or 3D data. ",(0,a.kt)("inlineCode",{parentName:"p"},"x"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"y"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"z")," are the\ncorresponding axis scaling. While exporting, axis scaling is optional. In case\n",(0,a.kt)("inlineCode",{parentName:"p"},"x"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"y"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"z")," is not provided the default scaling (",(0,a.kt)("inlineCode",{parentName:"p"},"DimOffset=0"),", and\n",(0,a.kt)("inlineCode",{parentName:"p"},"DimDelta=1"),") would be applied. Similarly, you can provide wave name, and axis\nlabels (optional) as well."),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},"If you need to read Igor Binary Waves (",(0,a.kt)("inlineCode",{parentName:"p"},".ibw")," format), you can check out this\nPython implementation: ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/wking/igor"},"https://github.com/wking/igor"),".")))}u.isMDXComponent=!0}}]);