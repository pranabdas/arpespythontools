"use strict";(self.webpackChunkarpespythontools=self.webpackChunkarpespythontools||[]).push([[264],{1454:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>d,contentTitle:()=>i,default:()=>p,frontMatter:()=>r,metadata:()=>s,toc:()=>l});var n=o(5893),a=o(1151);const r={title:"Import / export Igor text",sidebar_label:"Igor text"},i=void 0,s={id:"igor",title:"Import / export Igor text",description:"If you need to work with the Igor Program, arpespythontools provides a way to",source:"@site/docs/igor.md",sourceDirName:".",slug:"/igor",permalink:"/arpespythontools/docs/igor",draft:!1,unlisted:!1,editUrl:"https://github.com/pranabdas/arpespythontools/blob/main/docs/igor.md",tags:[],version:"current",frontMatter:{title:"Import / export Igor text",sidebar_label:"Igor text"},sidebar:"docs",previous:{title:"XPS data",permalink:"/arpespythontools/docs/xps"},next:{title:"Glossary",permalink:"/arpespythontools/docs/glossary"}},d={},l=[];function c(e){const t={a:"a",admonition:"admonition",code:"code",p:"p",pre:"pre",...(0,a.a)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(t.p,{children:["If you need to work with the Igor Program, ",(0,n.jsx)(t.code,{children:"arpespythontools"})," provides a way to\nimport and export data in Igor text (",(0,n.jsx)(t.code,{children:".itx"}),") format. ",(0,n.jsx)(t.code,{children:"import_itx"})," and\n",(0,n.jsx)(t.code,{children:"export_itx"})," functions can import and export 1-dimensionl, 2-dimensionl, and\n3-dimensionl data/wave, respectively."]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-python",metastring:"showLineNumbers",children:"import arpespythontools as arp\n\n# import itx file\ndata, x = arp.import_itx('path/data.itx')  # 1D wave\ndata, x, y = arp.import_itx('path/data.itx')  # 2D wave\ndata, x, y, z = arp.import_itx('path/data.itx')  # 3D wave\n\n# export itx file\narp.export_itx(\"path/data.itx\", data, x=[], y=[], z =[], wave_name='wave',\\\n    x_label='x-label', y_label='y-label', z_label='z-label')\n"})}),"\n",(0,n.jsxs)(t.p,{children:["While importing, ",(0,n.jsx)(t.code,{children:"data"})," contains the 1D, 2D or 3D data. ",(0,n.jsx)(t.code,{children:"x"}),", ",(0,n.jsx)(t.code,{children:"y"}),", ",(0,n.jsx)(t.code,{children:"z"})," are the\ncorresponding axis scaling. While exporting, axis scaling is optional. In case\n",(0,n.jsx)(t.code,{children:"x"}),", ",(0,n.jsx)(t.code,{children:"y"}),", ",(0,n.jsx)(t.code,{children:"z"})," is not provided the default scaling (",(0,n.jsx)(t.code,{children:"DimOffset=0"}),", and\n",(0,n.jsx)(t.code,{children:"DimDelta=1"}),") would be applied. Similarly, you can provide wave name, and axis\nlabels (optional) as well."]}),"\n",(0,n.jsx)(t.admonition,{type:"note",children:(0,n.jsxs)(t.p,{children:["If you need to read Igor Binary Waves (",(0,n.jsx)(t.code,{children:".ibw"})," format), you can check out this\nPython implementation: ",(0,n.jsx)(t.a,{href:"https://github.com/wking/igor",children:"https://github.com/wking/igor"}),"."]})})]})}function p(e={}){const{wrapper:t}={...(0,a.a)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(c,{...e})}):c(e)}},1151:(e,t,o)=>{o.d(t,{Z:()=>s,a:()=>i});var n=o(7294);const a={},r=n.createContext(a);function i(e){const t=n.useContext(r);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),n.createElement(r.Provider,{value:t},e.children)}}}]);